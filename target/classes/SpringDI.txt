### Spring DI 활용하기 이론(1)
1. 빈이란?
    [역사]
    - JavaBeans: 재사용 가능한 컴포넌트, 상태(iv), getter&setter, no-args constructor
    - Servlet & JSP bean - MVC의 Model, EL, scope, JSP container가 관리
    - EJB (Enterprise Java Beans) - 복잡한 규칙, EJB container가 관리(빈 생성, 소멸)
    - Spring Bean POJO (Plain Old Java Object): 단순, 독립적, Spring contatiner가 관리
2. BeanFactory와 ApplicationContext
    [정의]
    - Bean: Spring Contatiner가 관리하는 객체
    - Spring container: Bean 저장소, Bean을 저장, 관리(생성, 소멸, 연결)
      - BeanFactory: Bean을 생성, 연결 등의 기본 기능을 정의
      - ApplicationContext: BeanFactory를 확정해서 여러 기능을 추가 정의
3. ApplicationContext의 종류
    [ApplicationContext의 구현체]
    - ApplcationContext는 인터페이스
    - non-Web 설정
      - XMl:GenericXmlApplicationContext (<bean>)
      - Java Config: AnnotationConfigApplicationContext (@Bean)
    - Web 설정
      - XML: XmlWebApplicationContext (<bean>)
      - Java Config: AnnotationConfigWebApplicationContext (@Bean)
    - 요즘엔 대부분 Java Config 형식으로 설정함

### Spring DI 활용하기 - 이론(2)
4. ApplicationContext의 주요 메서드
    - 노션 정리 참고
    - [int] getBeanDefinitionCount(): 정의된 빈의 갯수
    - [String[]] getBeanDefinitionNames(): 정의된 빈의 이름들
    - [Object] getBean("name"), getBean(Type.class): 정의되어 있는 빈 객체
    - [boolean] containsBean("name"): 빈의 존재 유무
    - [Annotation] findAnnotationOnBean(beanName, annotationType): 빈에 정의된 애노테이션
    - [boolean] isTypeMatch("name",Type.class): 빈이 타입이 매치되는지 유무
    - [boolean] isProtoType("name"), isSingleton("name"): 빈의 scope 타입
### Spring DI 활용하기 - 이론(3)
5. IoC와 DI
    [제어의 역전 IoC]
    - 제어의 역전: 제어의 흐름을 전통적인 방식과 다르게 뒤바꾸는 것
       - 전통적인 방식: 사용자의 코드가 Framework 코드를 호출
       - IoC: framework 코드가 사용자 코드를 호출
         - 목적: 잘 변하지 않는 코드와 변하는 코드를 분리하기 위해 고안된 개념
         - ex) framework 내부의 코드 변화 없이 사용자의 코드만 변경 가능하게 됨
    [의존성 주입 DI]
    - 의존성 주입: 사용할 객체를 외부에서 주입 받는 것
    - IoC와 함께 가는 개념.
    - 목적: 잘 변하지 않는 코드와 변하는 코드를 분리하기 위해 고안된 개념
       - ex) 사용자의 코드에서 사용할 객체를 framework에 주입함
6. 스프링 애노테이션 - @Autowired
    [@Autowired]
    - Spring container에서 타입으로 빈을 검색해서 참조 변수에 자동으로 주입(DI)
    - 검색된 빈이 n개면 계중 참조변수와 이름이 일치하는 것을 주입
    - 주입 대상이 변수일 때 검색된 빈이 1개가 아니면 예외 발생
    - 주입 대상이 배열일 떄 검색된 빈이 n개라도 예외 발생하지 않음
    - 인스턴스 변수(iv), setter, 참조형 매개변수를 가진 생성자, 메서드에 사용
    - 주로 생성자 주입을 권장
       - 인스턴스 변수(iv)
            @Autowired Engine;
            @Autowired Door;
       - 생성자(@Autowired 생략 가능: 생성자가 하나일때만)
            @Autowired
            public Car(@Value("red") String color, @Value("100") int oil, Engine engine, Door door){}
       - setter 메서드
            @Autowired
            public void SetEngineAndDoor(Engine engine, Door door){}
    - 참고
       - @Autowired(required="false")
       - required 값을 false로 줄 수 있음
       - 주입할 빈을 찾지 못해도 예외가 발생하지 않음
       - AC에 bean 등록이 안되어 있다면 null
7. 스프링 애노테이션 - @Resource
    [@Resource]
    - spring containter에서 이름으로 빈을 검색해서 참조변수에 자동 주입(DI)
    - 일치하는 이름의 빈이 없으면 예외 발생
    - @Autowired와 사용하는 방법은 같음
      - 생성자, setter, iv
    - @Autowired + @Qualifer() 는 타입을 먼저 찾고 네임을 찾음 (권장)
    - @Resource는 이름으로 검색하기 때문에 위와는 본질적으로 다름
8. 스프링 애노테이션 - @Component
    - <component-scan>으로 @Component가 클래스를 자동 검색해서 빈으로 등록
    - config.xml 파일에서 <component-scan base-package="..."/> 등록 필요
    - @Component(id="") id 생략시 클래스의 첫글자를 소문자로 바꾸어 등록
    - @Controller, @Service, @Repository, @ControllerAdvice(예외처리)의 메타 애노테이션
9. 스프링 애노테이션 - @Value, @PropertySource
    [@Value]
    - iv에 값을 지정할 때 사용
    - systemProperties를 사용 가능
    - 외부 파일에서 값을 가져와서 사용할수도 있음
    [@PropertySource]


